# George Miloshevich 2021
# This routine is written for two parameters: input folder for VAE weights and the given epoch. It shows us how good the reconstruction of the VAE works
import os, sys
from glob import glob
import shutil
os.environ['TF_XLA_FLAGS'] = '--tf_xla_enable_xla_devices'  # https://stackoverflow.com/questions/65907365/tensorflow-not-creating-xla-devices-tf-xla-enable-xla-devices-not-set

print("==Importing tensorflow packages===")
import numpy as np
#from tensorflow.keras.preprocessing.image import ImageDataGenerator
sys.path.insert(1, '../ERA')
import TF_Fields as tff # tensorflow routines 



print("==Checking GPU==")
import tensorflow as tf
tf.test.is_gpu_available(
    cuda_only=False, min_cuda_compute_capability=None
)

print("==Checking CUDA==")
tf.test.is_built_with_cuda()

import importlib.util
def module_from_file(module_name, file_path): #The code that imports the file which originated the training with all the instructions
            spec = importlib.util.spec_from_file_location(module_name, file_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            return module

checkpoint_name = sys.argv[1]
checkpoint = sys.argv[2]

print("checkpoint_name = ", checkpoint_name)
print("loading module from ", checkpoint_name+'/Funs.py')
foo = module_from_file("foo", checkpoint_name+'/Funs.py')
print("==Reading data==")

X, LON, LAT, vae, Z_DIM, N_EPOCHS, INITIAL_EPOCH, BATCH_SIZE, LEARNING_RATE, checkpoint_path, checkpoint_name, myinput, history = foo.PrepareDataAndVAE(checkpoint_name, DIFFERENT_YEARS=np.random.permutation(range(2000,3000)))


print("X.shape = ", X.shape, " , np.max(X) = ", np.max(X), " , np.min (X) = ", np.min(X), " , np.mean(X[:,5,5,0]) = ", np.mean(X[:,5,5,0]), " , np.std(X[:,5,5,0]) = ", np.std(X[:,5,5,0]))

print("==loading the model: ", checkpoint_name)
vae = tf.keras.models.load_model(checkpoint_name, compile=False)


nb_zeros_c = 4-len(str(checkpoint))
checkpoint_i = '/cp-'+nb_zeros_c*'0'+str(checkpoint)+'.ckpt'

vae.load_weights(checkpoint_name+checkpoint_i)


import random as rd        
example_images = X[rd.sample(range(X.shape[0]), 5)]
import matplotlib.pyplot as plt


from scipy.stats import norm

_,_,z_test = vae.encoder.predict(X[rd.sample(range(X.shape[0]), 200)])
print("z_test.shape = ", z_test.shape)

Z_DIM = z_test.shape[1] #200 # Dimension of the latent vector (z)
x = np.linspace(-3, 3, 300)

fig = plt.figure(figsize=(20, 20))
fig.subplots_adjust(hspace=0.6, wspace=0.4)

for i in range(np.min([50, Z_DIM])):
    ax = fig.add_subplot(5, 10, i+1)
    ax.hist(z_test[:,i], density=True, bins = 20)
    ax.axis('off')
    ax.text(0.5, -0.35, str(i), fontsize=10, ha='center', transform=ax.transAxes)
    ax.plot(x,norm.pdf(x))

WEIGHTS_FOLDER, RESCALE_TYPE, Z_DIM, BATCH_SIZE, LEARNING_RATE, N_EPOCHS, SET_YEARS, K1, K2, checkpoint_name, data_path, Model, lon_start, lon_end, lat_start, lat_end, Tot_Mon1 = foo.PrepareParameters(checkpoint_name)
import ERA_Fields as ef
# We are loading the fields just to extract LON, LAT which is a bit awkward. This can be simplified
#zg500 = ef.Plasim_Field('zg','ANO_LONG_zg500','500 mbar Geopotential', Model, lat_start=lat_start, lat_end=lat_end, lon_start=lon_start, lon_end=lon_end,myprecision='single',mysampling='',years=8000)
#zg500.load_field('/local/gmiloshe/PLASIM/Data_Plasim_LONG/', year_list=[0])
#LON = zg500.LON # array with longitudes corresponding to each datapoint
#LAT = zg500.LAT # array with latitudes  corresponding to each datapoint
import matplotlib.gridspec as gridspec
import cartopy.crs as ccrs
import cartopy.feature as cfeat
data_proj = ccrs.PlateCarree()
import cartopy_plots as cplt

def vae_generate_images(vae,Z_DIM,n_to_show=10):
    reconst_images = vae.decoder.predict(np.random.normal(0,1,size=(n_to_show,Z_DIM)))
    
    reconst_images = reconst_images[...,0] # remove extra fields
    print("reconst_images.shape = ",reconst_images.shape)
    
    levels = np.linspace(0, 1, 32)
    print("levels = ", levels)
    fig2 = plt.figure(figsize=(40, 10))
    spec2 = gridspec.GridSpec(ncols=5, nrows=2, figure=fig2)
    iterate = 0
    jterate = 0
    ax = []
    for i in range(n_to_show):
        m = fig2.add_subplot(spec2[jterate,iterate], projection=ccrs.Orthographic(central_latitude=90))
        ax.append(m)
        img = reconst_images[i].squeeze()   
        print(iterate,jterate,img.shape,img.min(), img.max())
        m.set_extent([-180,180, 30, 90], crs=data_proj)
        ef.geo_contourf(m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img),levels, "seismic", f" generated zg500", put_colorbar=True)
        iterate += 1
        if iterate > 4:
            iterate = 0
            jterate = 1
        
        
vae_generate_images(vae,Z_DIM,n_to_show=10)


def plot_compare(model, images=None): # Plot images generated by the autoencoder
    model.encoder(images)
    mean, logvar, z_sample = model.encoder(images)
    reconst_images = model.decoder(z_sample).numpy()
    
    reconst_images = reconst_images[...,0] # remove extra fields
    print("reconst_images.shape = ",reconst_images.shape)
    images = images[...,0]
    print("images.shape = ",images
          .shape)
    #print("reconst_images.shape=",reconst_images.shape)
    n_to_show = 2*images.shape[0]
    
    levels = np.linspace(0, 1, 32)
    print("levels = ", levels)
    fig2 = plt.figure(figsize=(40, 10))
    spec2 = gridspec.GridSpec(ncols=5, nrows=2, figure=fig2)
    iterate = 0
    jterate = 0
    ax = []
    for i in range(n_to_show):
        m = fig2.add_subplot(spec2[jterate,iterate], projection=ccrs.Orthographic(central_latitude=90))
        ax.append(m)
        if jterate == 0:
            img = images[i].squeeze() 
        else:
            img = reconst_images[i-5].squeeze()   
        print(iterate,jterate,img.shape,img.min(), img.max())
        m.set_extent([-180,180, 30, 90], crs=data_proj)
        if jterate == 0:
            ef.geo_contourf(m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img),levels, "seismic", f"actual zg500", put_colorbar=True)
        else:
            ef.geo_contourf(m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img),levels, "seismic", f"reconstructed zg500", put_colorbar=True)
        iterate += 1
        if iterate > 4:
            iterate = 0
            jterate = 1

        
plot_compare(vae,example_images)

plt.show()

