# George Miloshevich 2022
# This routine is written for two parameters: input folder for VAE weights and the given epoch. It shows us how good the reconstruction of the VAE works
import os, sys
import shutil
from pathlib import Path
os.environ['TF_XLA_FLAGS'] = '--tf_xla_enable_xla_devices'  # https://stackoverflow.com/questions/65907365/tensorflow-not-creating-xla-devices-tf-xla-enable-xla-devices-not-set
import logging
if __name__ == '__main__':
    logger = logging.getLogger()
    logger.handlers = [logging.StreamHandler(sys.stdout)]
else:
    logger = logging.getLogger(__name__)
logger.level = logging.INFO

fold_folder = Path(sys.argv[1])  # The name of the folder where the weights have been stored
checkpoint = sys.argv[2]       # The checkpoint at which the weights have been stored

import importlib.util
def module_from_file(module_name, file_path): #The code that imports the file which originated the training with all the instructions
            spec = importlib.util.spec_from_file_location(module_name, file_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            return module
        
logger.info(f"{fold_folder = }")
logger.info(f"loading module from  {fold_folder.parent}/Funs.py")
from importlib import import_module
#foo = import_module(fold_folder+'/Funs.py', package=None)
foo = module_from_file("foo", f'{fold_folder.parent}/Funs.py')
ef = foo.ef # Inherit ERA_Fields_New from the file we are calling

logger.info("==Importing tensorflow packages===")
import random as rd  
from scipy.stats import norm
import numpy as np

tff = foo.tff # tensorflow routines 
ut = foo.ut # utilities
logger.info("==Checking GPU==")
import tensorflow as tf
tf.test.is_gpu_available(
    cuda_only=False, min_cuda_compute_capability=None
)

logger.info("==Checking CUDA==")
tf.test.is_built_with_cuda()

import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import cartopy.mpl.geoaxes

import matplotlib.gridspec as gridspec
import cartopy.crs as ccrs
import cartopy.feature as cfeat
data_proj = ccrs.PlateCarree()

#from tensorflow.keras.preprocessing.image import ImageDataGenerator
sys.path.insert(1, '../ERA')
import cartopy_plots as cplt


logger.info("==Reading data==")

year_permutation = np.load(f'{fold_folder.parent}/year_permutation.npy')

#X, lat, lon, vae, Z_DIM, N_EPOCHS, INITIAL_EPOCH, BATCH_SIZE, LEARNING_RATE, checkpoint_path, fold_folder, myinput, history = foo.PrepareDataAndVAE(fold_folder, DIFFERENT_YEARS=year_permutation[:800])

history, history_loss, N_EPOCHS, INITIAL_EPOCH, checkpoint_path, LAT, LON, Y, vae, X, _, _, _, _ = foo.run_vae(fold_folder, myinput='N', SET_YEARS=year_permutation)
# Construct 2D array for lon-lat:


logger.info(f"{X.shape = }, {np.max(X) = }, {np.min(X) = }, {np.mean(X[:,5,5,0]) = }, {np.std(X[:,5,5,0]) = }")
logger.info(f"==loading the model: {fold_folder}")
vae = tf.keras.models.load_model(fold_folder, compile=False)

nb_zeros_c = 4-len(str(checkpoint))
checkpoint_i = '/cp_vae-'+nb_zeros_c*'0'+str(checkpoint)+'.ckpt' # TODO: convert to f-strings

logger.info(f'load weights from {fold_folder}/{checkpoint_i}')
vae.load_weights(f'{fold_folder}/{checkpoint_i}')
      
example_images = X[rd.sample(range(X.shape[0]), 5)] # random sample of 5 images from X's 0 axis

_,_,z_test = vae.encoder.predict(X[rd.sample(range(X.shape[0]), 200)])
logger.info(f"{z_test.shape = }")

Z_DIM = z_test.shape[1] #200 # Dimension of the latent vector (z)
x = np.linspace(-3, 3, 300)

fig = plt.figure(figsize=(20, 20))
fig.subplots_adjust(hspace=0.6, wspace=0.4)

for i in range(np.min([50, Z_DIM])):
    ax = fig.add_subplot(5, 10, i+1)
    ax.hist(z_test[:,i], density=True, bins = 20)
    ax.axis('off')
    ax.text(0.5, -0.35, str(i), fontsize=10, ha='center', transform=ax.transAxes)
    ax.plot(x,norm.pdf(x))


def vae_generate_images(vae,Z_DIM,n_to_show=10):
    # Plot images generated by the autoencoder
    reconst_images = vae.decoder.predict(np.random.normal(0,1,size=(n_to_show,Z_DIM)))
    
    # prerolling has already occured so
    reconst_images2 = reconst_images[...,2] # remove extra fields 
    reconst_images1 = reconst_images[...,1] # remove extra fields 
    reconst_images0 = reconst_images[...,0] # remove extra fields 
    logger.info(f"{reconst_images.shape = }")
    
    levels = np.linspace(0, 1, 64)
    logger.info("levels = ", levels)
    fig2 = plt.figure(figsize=(40, 10))
    spec2 = gridspec.GridSpec(ncols=5, nrows=2, figure=fig2)
    iterate = 0
    jterate = 0
    ax = []
    axins= []
    for i in range(n_to_show):
        m = fig2.add_subplot(spec2[jterate,iterate], projection=ccrs.Orthographic(central_latitude=90))
        ax.append(m)
        img2 = reconst_images2[i].squeeze() 
        img1 = reconst_images1[i].squeeze()   
        img0 = reconst_images0[i].squeeze()   
        logger.info(f"{LON.shape = } ,{LAT.shape = } ,{img0.shape = }, {img1.shape = }")
        m.set_extent([-180,180, 30, 90], crs=data_proj)
        ef.geo_contourf(m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img0),levels, "seismic", f" generated", put_colorbar=False, draw_gridlines=False)
        ef.geo_contour (m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img1),levels, "PuRd", "summer")
        
        
        for img_sub, loc_string, title_sub in zip([img0, img2],["upper left","upper right"],["t2m","mrso"]):
            axins.append(inset_axes(m, width="40%", height="50%", loc=loc_string, 
                       axes_class=cartopy.mpl.geoaxes.GeoAxes, 
                       axes_kwargs=dict(map_projection=cartopy.crs.PlateCarree())))


            axins[-1].add_feature(cartopy.feature.COASTLINE)
            axins[-1].set_extent([-5,7, 42, 52], crs=data_proj)

            ef.geo_contourf(axins[-1], ax[iterate], 0, *cplt.Greenwich(LON, LAT,img_sub),levels, "seismic", "", put_colorbar=False, draw_gridlines=False)
            ef.geo_contour (axins[-1], ax[iterate], 0, *cplt.Greenwich(LON, LAT,img1),levels, "PuRd", "summer")


            axins[-1].set_title(title_sub)
        iterate += 1
        if iterate > 4:
            iterate = 0
            jterate = 1
        
        
vae_generate_images(vae,Z_DIM,n_to_show=10)


def plot_compare(model, images=None): 
    # Plot images as well as their reconstruction
    model.encoder(images)
    mean, logvar, z_sample = model.encoder(images)
    reconst_images = model.decoder(z_sample).numpy()
    
    reconst_images2 = reconst_images[...,2] # remove extra fields 
    reconst_images1 = reconst_images[...,1] # remove extra fields 
    reconst_images0 = reconst_images[...,0] # remove extra fields 
    logger.info(f"{reconst_images.shape = }")
    images2 = images[...,2]
    images1 = images[...,1]
    images0 = images[...,0]
    logger.info(f"{images0.shape = }")
    
    n_to_show = 2*images0.shape[0]
    
    levels = np.linspace(0, 1, 64)
    logger.info(f"{levels = }")
    fig2 = plt.figure(figsize=(40, 10))
    spec2 = gridspec.GridSpec(ncols=5, nrows=2, figure=fig2)
    iterate = 0
    jterate = 0
    ax = []
    axins = []
    for i in range(n_to_show):
        m = fig2.add_subplot(spec2[jterate,iterate], projection=ccrs.Orthographic(central_latitude=90))
        ax.append(m)
        if jterate == 0:
            img2 = images2[i].squeeze()
            img1 = images1[i].squeeze() 
            img0 = images0[i].squeeze() 
        else:
            img2 = reconst_images2[i-5].squeeze() 
            img1 = reconst_images1[i-5].squeeze()  
            img0 = reconst_images0[i-5].squeeze()  
        logger.info(f"{iterate = }, {jterate = },{img0.shape = },{img0.min() = }, {img0.max() = }")
        m.set_extent([-180,180, 30, 90], crs=data_proj)
        
        logger.info(f"{LON.shape = } ,{LAT.shape = } ,{img0.shape = }, {img1.shape = }")
        if jterate == 0:
            ef.geo_contourf(m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img0),levels, "seismic", f"actual", put_colorbar=False, draw_gridlines=False)
            ef.geo_contour (m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img1),levels, "PuRd", "summer")
        else:
            ef.geo_contourf(m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img0),levels, "seismic", f"reconstructed", put_colorbar=False, draw_gridlines=False)
            ef.geo_contour (m, ax[iterate], 0, *cplt.Greenwich(LON, LAT,img1),levels, "PuRd", "summer")
            
        for img_sub, loc_string, title_sub in zip([img0, img2],["upper left","upper right"],["t2m","mrso"]):
            axins.append(inset_axes(m, width="40%", height="50%", loc=loc_string, 
                       axes_class=cartopy.mpl.geoaxes.GeoAxes, 
                       axes_kwargs=dict(map_projection=cartopy.crs.PlateCarree())))


            axins[-1].add_feature(cartopy.feature.COASTLINE)
            axins[-1].set_extent([-5,7, 42, 52], crs=data_proj)

            ef.geo_contourf(axins[-1], ax[iterate], 0, *cplt.Greenwich(LON, LAT,img_sub),levels, "seismic", "", put_colorbar=False, draw_gridlines=False)
            ef.geo_contour (axins[-1], ax[iterate], 0, *cplt.Greenwich(LON, LAT,img1),levels, "PuRd", "summer")


            axins[-1].set_title(title_sub)
            
        iterate += 1
        if iterate > 4:
            iterate = 0
            jterate = 1

        
plot_compare(vae,example_images)

plt.show()

